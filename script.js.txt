/* =========================
   Helper / Prefers-reduced-motion
   ========================= */
const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

/* =========================
   Headline letter animation (stagger)
   ========================= */
(function headline(){
  const el = document.getElementById('heroLetters');
  const text = el.textContent.trim();
  el.textContent = '';
  const frag = document.createDocumentFragment();
  [...text].forEach((ch, i)=>{
    const span = document.createElement('span');
    span.textContent = ch;
    frag.appendChild(span);
    // stagger add class
    if(!reduceMotion){
      setTimeout(()=> span.classList.add('in'), 40 * i);
    } else {
      span.classList.add('in');
    }
  });
  el.appendChild(frag);
})();

/* =========================
   Particles generation (throttled)
   ========================= */
(function particles(){
  if(reduceMotion) return;
  const wrap = document.getElementById('particles');
  const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
  const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
  const count = Math.min(20, Math.floor((vw*vh)/120000)); // scale by viewport
  function rand(a,b){ return Math.random()*(b-a)+a; }
  for(let i=0;i<count;i++){
    const d = document.createElement('div');
    d.className = 'particle';
    const size = rand(8, 56);
    d.style.width = d.style.height = size + 'px';
    d.style.left = rand(0, 100) + '%';
    d.style.top = rand(10, 95) + '%';
    d.style.background = i%3===0 ? 'rgba(255,255,255,0.6)' : 'rgba(255,255,255,0.35)';
    const dur = rand(8000, 21000);
    d.animate([{ transform: 'translateY(0)', opacity: 0.6 }, { transform: `translateY(-${rand(30, 180)}px)`, opacity: 0.95 }], { duration: dur, iterations: Infinity, direction: 'alternate', easing: 'ease-in-out', delay: -rand(0, dur) });
    wrap.appendChild(d);
  }
})();

/* =========================
   Modal logic (open/close, focus trap, ESC, click outside)
   ========================= */
(function modals(){
  const openBtns = document.querySelectorAll('[data-modal]');
  const modals = document.querySelectorAll('.modal-backdrop');

  let lastActive = null;

  function trapFocus(modalCard){
    const focusable = modalCard.querySelectorAll('button, a, input, textarea, [tabindex]:not([tabindex="-1"])');
    if(!focusable.length) return ()=>{};
    const first = focusable[0], last = focusable[focusable.length-1];
    function keyHandler(e){
      if(e.key !== 'Tab') return;
      if(e.shiftKey && document.activeElement === first){ e.preventDefault(); last.focus(); }
      else if(!e.shiftKey && document.activeElement === last){ e.preventDefault(); first.focus(); }
    }
    modalCard.addEventListener('keydown', keyHandler);
    return ()=> modalCard.removeEventListener('keydown', keyHandler);
  }

  function openModal(id, trigger){
    const bd = document.getElementById(id);
    if(!bd) return;
    lastActive = trigger || document.activeElement;
    bd.setAttribute('aria-hidden', 'false');
    const card = bd.querySelector('.modal-card');
    const untrap = trapFocus(card);
    // expose untrap for close
    card._untrap = untrap;
    // focus close
    const closeBtn = bd.querySelector('[data-close]');
    if(closeBtn) closeBtn.focus({preventScroll:true});
  }

  function closeModal(bd){
    if(!bd) return;
    bd.setAttribute('aria-hidden', 'true');
    const card = bd.querySelector('.modal-card');
    if(card && card._untrap) card._untrap();
    if(lastActive) { try{ lastActive.focus(); }catch(e){} }
  }

  openBtns.forEach(btn=>{
    btn.addEventListener('click', ()=> {
      const id = btn.getAttribute('data-modal');
      openModal(id, btn);
    });
  });

  modals.forEach(bd=>{
    bd.addEventListener('click', (e)=>{
      if(e.target === bd) closeModal(bd);
    });
    // close buttons
    const c = bd.querySelector('[data-close]');
    if(c) c.addEventListener('click', ()=> closeModal(bd));
  });

  // ESC to close
  document.addEventListener('keydown', (e)=>{
    if(e.key === 'Escape'){
      document.querySelectorAll('.modal-backdrop[aria-hidden="false"]').forEach(bd => closeModal(bd));
    }
  });

  // keyboard: open via Enter on mem-card (accessibility)
  document.querySelectorAll('.mem-card').forEach(card=>{
    card.addEventListener('keydown', (e)=>{
      if(e.key === 'Enter' || e.key === ' ') {
        const btn = card.querySelector('[data-modal]');
        if(btn) btn.click();
      }
    });
  });
})();

/* =========================
   Chat rendering (IG-like, minimal emojis), staggered entrance using IntersectionObserver
   Chat data is editable below (replace avatar src or texts)
   ========================= */
const chatMessages = [
  { from:'her', text: "You Lost", avatar: "images/rak